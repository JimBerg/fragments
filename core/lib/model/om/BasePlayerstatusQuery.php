<?php


/**
 * Base class that represents a query for the 'Playerstatus' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.3 on:
 *
 * Tue May 24 10:36:30 2011
 *
 * @method     PlayerstatusQuery orderByUserId($order = Criteria::ASC) Order by the User_id column
 * @method     PlayerstatusQuery orderByOnFlight($order = Criteria::ASC) Order by the on_flight column
 * @method     PlayerstatusQuery orderByPoints($order = Criteria::ASC) Order by the points column
 * @method     PlayerstatusQuery orderByBonus($order = Criteria::ASC) Order by the bonus column
 * @method     PlayerstatusQuery orderByFlightPoints($order = Criteria::ASC) Order by the flight_points column
 * @method     PlayerstatusQuery orderByAvailableMiles($order = Criteria::ASC) Order by the available_miles column
 * @method     PlayerstatusQuery orderByFlightmilesTotal($order = Criteria::ASC) Order by the flightmiles_total column
 * @method     PlayerstatusQuery orderByFlightmilesWeek($order = Criteria::ASC) Order by the flightmiles_week column
 * @method     PlayerstatusQuery orderByFlightCount($order = Criteria::ASC) Order by the flight_count column
 * @method     PlayerstatusQuery orderByHomebaseFlight($order = Criteria::ASC) Order by the homebase_flight column
 * @method     PlayerstatusQuery orderByPlayerRank($order = Criteria::ASC) Order by the player_rank column
 * @method     PlayerstatusQuery orderByWeek1($order = Criteria::ASC) Order by the week1 column
 * @method     PlayerstatusQuery orderByWeek2($order = Criteria::ASC) Order by the week2 column
 * @method     PlayerstatusQuery orderByWeek3($order = Criteria::ASC) Order by the week3 column
 * @method     PlayerstatusQuery orderByWeek4($order = Criteria::ASC) Order by the week4 column
 * @method     PlayerstatusQuery orderByWeek5($order = Criteria::ASC) Order by the week5 column
 * @method     PlayerstatusQuery orderByWeek6($order = Criteria::ASC) Order by the week6 column
 * @method     PlayerstatusQuery orderByWeek7($order = Criteria::ASC) Order by the week7 column
 * @method     PlayerstatusQuery orderByWeek8($order = Criteria::ASC) Order by the week8 column
 *
 * @method     PlayerstatusQuery groupByUserId() Group by the User_id column
 * @method     PlayerstatusQuery groupByOnFlight() Group by the on_flight column
 * @method     PlayerstatusQuery groupByPoints() Group by the points column
 * @method     PlayerstatusQuery groupByBonus() Group by the bonus column
 * @method     PlayerstatusQuery groupByFlightPoints() Group by the flight_points column
 * @method     PlayerstatusQuery groupByAvailableMiles() Group by the available_miles column
 * @method     PlayerstatusQuery groupByFlightmilesTotal() Group by the flightmiles_total column
 * @method     PlayerstatusQuery groupByFlightmilesWeek() Group by the flightmiles_week column
 * @method     PlayerstatusQuery groupByFlightCount() Group by the flight_count column
 * @method     PlayerstatusQuery groupByHomebaseFlight() Group by the homebase_flight column
 * @method     PlayerstatusQuery groupByPlayerRank() Group by the player_rank column
 * @method     PlayerstatusQuery groupByWeek1() Group by the week1 column
 * @method     PlayerstatusQuery groupByWeek2() Group by the week2 column
 * @method     PlayerstatusQuery groupByWeek3() Group by the week3 column
 * @method     PlayerstatusQuery groupByWeek4() Group by the week4 column
 * @method     PlayerstatusQuery groupByWeek5() Group by the week5 column
 * @method     PlayerstatusQuery groupByWeek6() Group by the week6 column
 * @method     PlayerstatusQuery groupByWeek7() Group by the week7 column
 * @method     PlayerstatusQuery groupByWeek8() Group by the week8 column
 *
 * @method     PlayerstatusQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     PlayerstatusQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     PlayerstatusQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     PlayerstatusQuery leftJoinUser($relationAlias = null) Adds a LEFT JOIN clause to the query using the User relation
 * @method     PlayerstatusQuery rightJoinUser($relationAlias = null) Adds a RIGHT JOIN clause to the query using the User relation
 * @method     PlayerstatusQuery innerJoinUser($relationAlias = null) Adds a INNER JOIN clause to the query using the User relation
 *
 * @method     Playerstatus findOne(PropelPDO $con = null) Return the first Playerstatus matching the query
 * @method     Playerstatus findOneOrCreate(PropelPDO $con = null) Return the first Playerstatus matching the query, or a new Playerstatus object populated from the query conditions when no match is found
 *
 * @method     Playerstatus findOneByUserId(int $User_id) Return the first Playerstatus filtered by the User_id column
 * @method     Playerstatus findOneByOnFlight(boolean $on_flight) Return the first Playerstatus filtered by the on_flight column
 * @method     Playerstatus findOneByPoints(string $points) Return the first Playerstatus filtered by the points column
 * @method     Playerstatus findOneByBonus(int $bonus) Return the first Playerstatus filtered by the bonus column
 * @method     Playerstatus findOneByFlightPoints(int $flight_points) Return the first Playerstatus filtered by the flight_points column
 * @method     Playerstatus findOneByAvailableMiles(int $available_miles) Return the first Playerstatus filtered by the available_miles column
 * @method     Playerstatus findOneByFlightmilesTotal(int $flightmiles_total) Return the first Playerstatus filtered by the flightmiles_total column
 * @method     Playerstatus findOneByFlightmilesWeek(int $flightmiles_week) Return the first Playerstatus filtered by the flightmiles_week column
 * @method     Playerstatus findOneByFlightCount(int $flight_count) Return the first Playerstatus filtered by the flight_count column
 * @method     Playerstatus findOneByHomebaseFlight(int $homebase_flight) Return the first Playerstatus filtered by the homebase_flight column
 * @method     Playerstatus findOneByPlayerRank(string $player_rank) Return the first Playerstatus filtered by the player_rank column
 * @method     Playerstatus findOneByWeek1(int $week1) Return the first Playerstatus filtered by the week1 column
 * @method     Playerstatus findOneByWeek2(int $week2) Return the first Playerstatus filtered by the week2 column
 * @method     Playerstatus findOneByWeek3(int $week3) Return the first Playerstatus filtered by the week3 column
 * @method     Playerstatus findOneByWeek4(int $week4) Return the first Playerstatus filtered by the week4 column
 * @method     Playerstatus findOneByWeek5(int $week5) Return the first Playerstatus filtered by the week5 column
 * @method     Playerstatus findOneByWeek6(int $week6) Return the first Playerstatus filtered by the week6 column
 * @method     Playerstatus findOneByWeek7(int $week7) Return the first Playerstatus filtered by the week7 column
 * @method     Playerstatus findOneByWeek8(int $week8) Return the first Playerstatus filtered by the week8 column
 *
 * @method     array findByUserId(int $User_id) Return Playerstatus objects filtered by the User_id column
 * @method     array findByOnFlight(boolean $on_flight) Return Playerstatus objects filtered by the on_flight column
 * @method     array findByPoints(string $points) Return Playerstatus objects filtered by the points column
 * @method     array findByBonus(int $bonus) Return Playerstatus objects filtered by the bonus column
 * @method     array findByFlightPoints(int $flight_points) Return Playerstatus objects filtered by the flight_points column
 * @method     array findByAvailableMiles(int $available_miles) Return Playerstatus objects filtered by the available_miles column
 * @method     array findByFlightmilesTotal(int $flightmiles_total) Return Playerstatus objects filtered by the flightmiles_total column
 * @method     array findByFlightmilesWeek(int $flightmiles_week) Return Playerstatus objects filtered by the flightmiles_week column
 * @method     array findByFlightCount(int $flight_count) Return Playerstatus objects filtered by the flight_count column
 * @method     array findByHomebaseFlight(int $homebase_flight) Return Playerstatus objects filtered by the homebase_flight column
 * @method     array findByPlayerRank(string $player_rank) Return Playerstatus objects filtered by the player_rank column
 * @method     array findByWeek1(int $week1) Return Playerstatus objects filtered by the week1 column
 * @method     array findByWeek2(int $week2) Return Playerstatus objects filtered by the week2 column
 * @method     array findByWeek3(int $week3) Return Playerstatus objects filtered by the week3 column
 * @method     array findByWeek4(int $week4) Return Playerstatus objects filtered by the week4 column
 * @method     array findByWeek5(int $week5) Return Playerstatus objects filtered by the week5 column
 * @method     array findByWeek6(int $week6) Return Playerstatus objects filtered by the week6 column
 * @method     array findByWeek7(int $week7) Return Playerstatus objects filtered by the week7 column
 * @method     array findByWeek8(int $week8) Return Playerstatus objects filtered by the week8 column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BasePlayerstatusQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BasePlayerstatusQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Playerstatus', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new PlayerstatusQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    PlayerstatusQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof PlayerstatusQuery) {
			return $criteria;
		}
		$query = new PlayerstatusQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    Playerstatus|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = PlayerstatusPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{	
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(PlayerstatusPeer::USER_ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(PlayerstatusPeer::USER_ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the User_id column
	 * 
	 * @param     int|array $userId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByUserId($userId = null, $comparison = null)
	{
		if (is_array($userId) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(PlayerstatusPeer::USER_ID, $userId, $comparison);
	}

	/**
	 * Filter the query on the on_flight column
	 * 
	 * @param     boolean|string $onFlight The value to use as filter.
	 *            Accepts strings ('false', 'off', '-', 'no', 'n', and '0' are false, the rest is true)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByOnFlight($onFlight = null, $comparison = null)
	{
		if (is_string($onFlight)) {
			$on_flight = in_array(strtolower($onFlight), array('false', 'off', '-', 'no', 'n', '0')) ? false : true;
		}
		return $this->addUsingAlias(PlayerstatusPeer::ON_FLIGHT, $onFlight, $comparison);
	}

	/**
	 * Filter the query on the points column
	 * 
	 * @param     string $points The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByPoints($points = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($points)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $points)) {
				$points = str_replace('*', '%', $points);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(PlayerstatusPeer::POINTS, $points, $comparison);
	}

	/**
	 * Filter the query on the bonus column
	 * 
	 * @param     int|array $bonus The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByBonus($bonus = null, $comparison = null)
	{
		if (is_array($bonus)) {
			$useMinMax = false;
			if (isset($bonus['min'])) {
				$this->addUsingAlias(PlayerstatusPeer::BONUS, $bonus['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($bonus['max'])) {
				$this->addUsingAlias(PlayerstatusPeer::BONUS, $bonus['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PlayerstatusPeer::BONUS, $bonus, $comparison);
	}

	/**
	 * Filter the query on the flight_points column
	 * 
	 * @param     int|array $flightPoints The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByFlightPoints($flightPoints = null, $comparison = null)
	{
		if (is_array($flightPoints)) {
			$useMinMax = false;
			if (isset($flightPoints['min'])) {
				$this->addUsingAlias(PlayerstatusPeer::FLIGHT_POINTS, $flightPoints['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($flightPoints['max'])) {
				$this->addUsingAlias(PlayerstatusPeer::FLIGHT_POINTS, $flightPoints['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PlayerstatusPeer::FLIGHT_POINTS, $flightPoints, $comparison);
	}

	/**
	 * Filter the query on the available_miles column
	 * 
	 * @param     int|array $availableMiles The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByAvailableMiles($availableMiles = null, $comparison = null)
	{
		if (is_array($availableMiles)) {
			$useMinMax = false;
			if (isset($availableMiles['min'])) {
				$this->addUsingAlias(PlayerstatusPeer::AVAILABLE_MILES, $availableMiles['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($availableMiles['max'])) {
				$this->addUsingAlias(PlayerstatusPeer::AVAILABLE_MILES, $availableMiles['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PlayerstatusPeer::AVAILABLE_MILES, $availableMiles, $comparison);
	}

	/**
	 * Filter the query on the flightmiles_total column
	 * 
	 * @param     int|array $flightmilesTotal The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByFlightmilesTotal($flightmilesTotal = null, $comparison = null)
	{
		if (is_array($flightmilesTotal)) {
			$useMinMax = false;
			if (isset($flightmilesTotal['min'])) {
				$this->addUsingAlias(PlayerstatusPeer::FLIGHTMILES_TOTAL, $flightmilesTotal['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($flightmilesTotal['max'])) {
				$this->addUsingAlias(PlayerstatusPeer::FLIGHTMILES_TOTAL, $flightmilesTotal['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PlayerstatusPeer::FLIGHTMILES_TOTAL, $flightmilesTotal, $comparison);
	}

	/**
	 * Filter the query on the flightmiles_week column
	 * 
	 * @param     int|array $flightmilesWeek The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByFlightmilesWeek($flightmilesWeek = null, $comparison = null)
	{
		if (is_array($flightmilesWeek)) {
			$useMinMax = false;
			if (isset($flightmilesWeek['min'])) {
				$this->addUsingAlias(PlayerstatusPeer::FLIGHTMILES_WEEK, $flightmilesWeek['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($flightmilesWeek['max'])) {
				$this->addUsingAlias(PlayerstatusPeer::FLIGHTMILES_WEEK, $flightmilesWeek['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PlayerstatusPeer::FLIGHTMILES_WEEK, $flightmilesWeek, $comparison);
	}

	/**
	 * Filter the query on the flight_count column
	 * 
	 * @param     int|array $flightCount The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByFlightCount($flightCount = null, $comparison = null)
	{
		if (is_array($flightCount)) {
			$useMinMax = false;
			if (isset($flightCount['min'])) {
				$this->addUsingAlias(PlayerstatusPeer::FLIGHT_COUNT, $flightCount['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($flightCount['max'])) {
				$this->addUsingAlias(PlayerstatusPeer::FLIGHT_COUNT, $flightCount['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PlayerstatusPeer::FLIGHT_COUNT, $flightCount, $comparison);
	}

	/**
	 * Filter the query on the homebase_flight column
	 * 
	 * @param     int|array $homebaseFlight The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByHomebaseFlight($homebaseFlight = null, $comparison = null)
	{
		if (is_array($homebaseFlight)) {
			$useMinMax = false;
			if (isset($homebaseFlight['min'])) {
				$this->addUsingAlias(PlayerstatusPeer::HOMEBASE_FLIGHT, $homebaseFlight['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($homebaseFlight['max'])) {
				$this->addUsingAlias(PlayerstatusPeer::HOMEBASE_FLIGHT, $homebaseFlight['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PlayerstatusPeer::HOMEBASE_FLIGHT, $homebaseFlight, $comparison);
	}

	/**
	 * Filter the query on the player_rank column
	 * 
	 * @param     string $playerRank The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByPlayerRank($playerRank = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($playerRank)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $playerRank)) {
				$playerRank = str_replace('*', '%', $playerRank);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(PlayerstatusPeer::PLAYER_RANK, $playerRank, $comparison);
	}

	/**
	 * Filter the query on the week1 column
	 * 
	 * @param     int|array $week1 The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByWeek1($week1 = null, $comparison = null)
	{
		if (is_array($week1)) {
			$useMinMax = false;
			if (isset($week1['min'])) {
				$this->addUsingAlias(PlayerstatusPeer::WEEK1, $week1['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($week1['max'])) {
				$this->addUsingAlias(PlayerstatusPeer::WEEK1, $week1['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PlayerstatusPeer::WEEK1, $week1, $comparison);
	}

	/**
	 * Filter the query on the week2 column
	 * 
	 * @param     int|array $week2 The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByWeek2($week2 = null, $comparison = null)
	{
		if (is_array($week2)) {
			$useMinMax = false;
			if (isset($week2['min'])) {
				$this->addUsingAlias(PlayerstatusPeer::WEEK2, $week2['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($week2['max'])) {
				$this->addUsingAlias(PlayerstatusPeer::WEEK2, $week2['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PlayerstatusPeer::WEEK2, $week2, $comparison);
	}

	/**
	 * Filter the query on the week3 column
	 * 
	 * @param     int|array $week3 The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByWeek3($week3 = null, $comparison = null)
	{
		if (is_array($week3)) {
			$useMinMax = false;
			if (isset($week3['min'])) {
				$this->addUsingAlias(PlayerstatusPeer::WEEK3, $week3['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($week3['max'])) {
				$this->addUsingAlias(PlayerstatusPeer::WEEK3, $week3['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PlayerstatusPeer::WEEK3, $week3, $comparison);
	}

	/**
	 * Filter the query on the week4 column
	 * 
	 * @param     int|array $week4 The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByWeek4($week4 = null, $comparison = null)
	{
		if (is_array($week4)) {
			$useMinMax = false;
			if (isset($week4['min'])) {
				$this->addUsingAlias(PlayerstatusPeer::WEEK4, $week4['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($week4['max'])) {
				$this->addUsingAlias(PlayerstatusPeer::WEEK4, $week4['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PlayerstatusPeer::WEEK4, $week4, $comparison);
	}

	/**
	 * Filter the query on the week5 column
	 * 
	 * @param     int|array $week5 The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByWeek5($week5 = null, $comparison = null)
	{
		if (is_array($week5)) {
			$useMinMax = false;
			if (isset($week5['min'])) {
				$this->addUsingAlias(PlayerstatusPeer::WEEK5, $week5['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($week5['max'])) {
				$this->addUsingAlias(PlayerstatusPeer::WEEK5, $week5['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PlayerstatusPeer::WEEK5, $week5, $comparison);
	}

	/**
	 * Filter the query on the week6 column
	 * 
	 * @param     int|array $week6 The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByWeek6($week6 = null, $comparison = null)
	{
		if (is_array($week6)) {
			$useMinMax = false;
			if (isset($week6['min'])) {
				$this->addUsingAlias(PlayerstatusPeer::WEEK6, $week6['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($week6['max'])) {
				$this->addUsingAlias(PlayerstatusPeer::WEEK6, $week6['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PlayerstatusPeer::WEEK6, $week6, $comparison);
	}

	/**
	 * Filter the query on the week7 column
	 * 
	 * @param     int|array $week7 The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByWeek7($week7 = null, $comparison = null)
	{
		if (is_array($week7)) {
			$useMinMax = false;
			if (isset($week7['min'])) {
				$this->addUsingAlias(PlayerstatusPeer::WEEK7, $week7['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($week7['max'])) {
				$this->addUsingAlias(PlayerstatusPeer::WEEK7, $week7['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PlayerstatusPeer::WEEK7, $week7, $comparison);
	}

	/**
	 * Filter the query on the week8 column
	 * 
	 * @param     int|array $week8 The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByWeek8($week8 = null, $comparison = null)
	{
		if (is_array($week8)) {
			$useMinMax = false;
			if (isset($week8['min'])) {
				$this->addUsingAlias(PlayerstatusPeer::WEEK8, $week8['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($week8['max'])) {
				$this->addUsingAlias(PlayerstatusPeer::WEEK8, $week8['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PlayerstatusPeer::WEEK8, $week8, $comparison);
	}

	/**
	 * Filter the query by a related User object
	 *
	 * @param     User $user  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function filterByUser($user, $comparison = null)
	{
		return $this
			->addUsingAlias(PlayerstatusPeer::USER_ID, $user->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the User relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function joinUser($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('User');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'User');
		}
		
		return $this;
	}

	/**
	 * Use the User relation User object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    UserQuery A secondary query class using the current class as primary query
	 */
	public function useUserQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinUser($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'User', 'UserQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Playerstatus $playerstatus Object to remove from the list of results
	 *
	 * @return    PlayerstatusQuery The current query, for fluid interface
	 */
	public function prune($playerstatus = null)
	{
		if ($playerstatus) {
			$this->addUsingAlias(PlayerstatusPeer::USER_ID, $playerstatus->getUserId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BasePlayerstatusQuery
