<?php


/**
 * Base class that represents a query for the 'Flight' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.3 on:
 *
 * Tue May 24 10:36:29 2011
 *
 * @method     FlightQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     FlightQuery orderByUserId($order = Criteria::ASC) Order by the User_id column
 * @method     FlightQuery orderByFriendId($order = Criteria::ASC) Order by the Friend_id column
 * @method     FlightQuery orderByStartLocationId($order = Criteria::ASC) Order by the start_location_id column
 * @method     FlightQuery orderByTargetLocationId($order = Criteria::ASC) Order by the target_location_id column
 * @method     FlightQuery orderByFlightType($order = Criteria::ASC) Order by the flight_type column
 * @method     FlightQuery orderByFlightStart($order = Criteria::ASC) Order by the flight_start column
 * @method     FlightQuery orderByFlightEnd($order = Criteria::ASC) Order by the flight_end column
 * @method     FlightQuery orderByFlightDuration($order = Criteria::ASC) Order by the flight_duration column
 * @method     FlightQuery orderByFlightAccepted($order = Criteria::ASC) Order by the flight_accepted column
 * @method     FlightQuery orderByLandingNotification($order = Criteria::ASC) Order by the landing_notification column
 *
 * @method     FlightQuery groupById() Group by the id column
 * @method     FlightQuery groupByUserId() Group by the User_id column
 * @method     FlightQuery groupByFriendId() Group by the Friend_id column
 * @method     FlightQuery groupByStartLocationId() Group by the start_location_id column
 * @method     FlightQuery groupByTargetLocationId() Group by the target_location_id column
 * @method     FlightQuery groupByFlightType() Group by the flight_type column
 * @method     FlightQuery groupByFlightStart() Group by the flight_start column
 * @method     FlightQuery groupByFlightEnd() Group by the flight_end column
 * @method     FlightQuery groupByFlightDuration() Group by the flight_duration column
 * @method     FlightQuery groupByFlightAccepted() Group by the flight_accepted column
 * @method     FlightQuery groupByLandingNotification() Group by the landing_notification column
 *
 * @method     FlightQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     FlightQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     FlightQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     FlightQuery leftJoinUser($relationAlias = null) Adds a LEFT JOIN clause to the query using the User relation
 * @method     FlightQuery rightJoinUser($relationAlias = null) Adds a RIGHT JOIN clause to the query using the User relation
 * @method     FlightQuery innerJoinUser($relationAlias = null) Adds a INNER JOIN clause to the query using the User relation
 *
 * @method     FlightQuery leftJoinFriend($relationAlias = null) Adds a LEFT JOIN clause to the query using the Friend relation
 * @method     FlightQuery rightJoinFriend($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Friend relation
 * @method     FlightQuery innerJoinFriend($relationAlias = null) Adds a INNER JOIN clause to the query using the Friend relation
 *
 * @method     FlightQuery leftJoinLocationRelatedByStartLocationId($relationAlias = null) Adds a LEFT JOIN clause to the query using the LocationRelatedByStartLocationId relation
 * @method     FlightQuery rightJoinLocationRelatedByStartLocationId($relationAlias = null) Adds a RIGHT JOIN clause to the query using the LocationRelatedByStartLocationId relation
 * @method     FlightQuery innerJoinLocationRelatedByStartLocationId($relationAlias = null) Adds a INNER JOIN clause to the query using the LocationRelatedByStartLocationId relation
 *
 * @method     FlightQuery leftJoinLocationRelatedByTargetLocationId($relationAlias = null) Adds a LEFT JOIN clause to the query using the LocationRelatedByTargetLocationId relation
 * @method     FlightQuery rightJoinLocationRelatedByTargetLocationId($relationAlias = null) Adds a RIGHT JOIN clause to the query using the LocationRelatedByTargetLocationId relation
 * @method     FlightQuery innerJoinLocationRelatedByTargetLocationId($relationAlias = null) Adds a INNER JOIN clause to the query using the LocationRelatedByTargetLocationId relation
 *
 * @method     Flight findOne(PropelPDO $con = null) Return the first Flight matching the query
 * @method     Flight findOneOrCreate(PropelPDO $con = null) Return the first Flight matching the query, or a new Flight object populated from the query conditions when no match is found
 *
 * @method     Flight findOneById(int $id) Return the first Flight filtered by the id column
 * @method     Flight findOneByUserId(int $User_id) Return the first Flight filtered by the User_id column
 * @method     Flight findOneByFriendId(int $Friend_id) Return the first Flight filtered by the Friend_id column
 * @method     Flight findOneByStartLocationId(int $start_location_id) Return the first Flight filtered by the start_location_id column
 * @method     Flight findOneByTargetLocationId(int $target_location_id) Return the first Flight filtered by the target_location_id column
 * @method     Flight findOneByFlightType(string $flight_type) Return the first Flight filtered by the flight_type column
 * @method     Flight findOneByFlightStart(string $flight_start) Return the first Flight filtered by the flight_start column
 * @method     Flight findOneByFlightEnd(string $flight_end) Return the first Flight filtered by the flight_end column
 * @method     Flight findOneByFlightDuration(int $flight_duration) Return the first Flight filtered by the flight_duration column
 * @method     Flight findOneByFlightAccepted(string $flight_accepted) Return the first Flight filtered by the flight_accepted column
 * @method     Flight findOneByLandingNotification(boolean $landing_notification) Return the first Flight filtered by the landing_notification column
 *
 * @method     array findById(int $id) Return Flight objects filtered by the id column
 * @method     array findByUserId(int $User_id) Return Flight objects filtered by the User_id column
 * @method     array findByFriendId(int $Friend_id) Return Flight objects filtered by the Friend_id column
 * @method     array findByStartLocationId(int $start_location_id) Return Flight objects filtered by the start_location_id column
 * @method     array findByTargetLocationId(int $target_location_id) Return Flight objects filtered by the target_location_id column
 * @method     array findByFlightType(string $flight_type) Return Flight objects filtered by the flight_type column
 * @method     array findByFlightStart(string $flight_start) Return Flight objects filtered by the flight_start column
 * @method     array findByFlightEnd(string $flight_end) Return Flight objects filtered by the flight_end column
 * @method     array findByFlightDuration(int $flight_duration) Return Flight objects filtered by the flight_duration column
 * @method     array findByFlightAccepted(string $flight_accepted) Return Flight objects filtered by the flight_accepted column
 * @method     array findByLandingNotification(boolean $landing_notification) Return Flight objects filtered by the landing_notification column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseFlightQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseFlightQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Flight', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new FlightQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    FlightQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof FlightQuery) {
			return $criteria;
		}
		$query = new FlightQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    Flight|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = FlightPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{	
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(FlightPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(FlightPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     int|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(FlightPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the User_id column
	 * 
	 * @param     int|array $userId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function filterByUserId($userId = null, $comparison = null)
	{
		if (is_array($userId)) {
			$useMinMax = false;
			if (isset($userId['min'])) {
				$this->addUsingAlias(FlightPeer::USER_ID, $userId['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($userId['max'])) {
				$this->addUsingAlias(FlightPeer::USER_ID, $userId['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FlightPeer::USER_ID, $userId, $comparison);
	}

	/**
	 * Filter the query on the Friend_id column
	 * 
	 * @param     int|array $friendId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function filterByFriendId($friendId = null, $comparison = null)
	{
		if (is_array($friendId)) {
			$useMinMax = false;
			if (isset($friendId['min'])) {
				$this->addUsingAlias(FlightPeer::FRIEND_ID, $friendId['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($friendId['max'])) {
				$this->addUsingAlias(FlightPeer::FRIEND_ID, $friendId['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FlightPeer::FRIEND_ID, $friendId, $comparison);
	}

	/**
	 * Filter the query on the start_location_id column
	 * 
	 * @param     int|array $startLocationId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function filterByStartLocationId($startLocationId = null, $comparison = null)
	{
		if (is_array($startLocationId)) {
			$useMinMax = false;
			if (isset($startLocationId['min'])) {
				$this->addUsingAlias(FlightPeer::START_LOCATION_ID, $startLocationId['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($startLocationId['max'])) {
				$this->addUsingAlias(FlightPeer::START_LOCATION_ID, $startLocationId['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FlightPeer::START_LOCATION_ID, $startLocationId, $comparison);
	}

	/**
	 * Filter the query on the target_location_id column
	 * 
	 * @param     int|array $targetLocationId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function filterByTargetLocationId($targetLocationId = null, $comparison = null)
	{
		if (is_array($targetLocationId)) {
			$useMinMax = false;
			if (isset($targetLocationId['min'])) {
				$this->addUsingAlias(FlightPeer::TARGET_LOCATION_ID, $targetLocationId['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($targetLocationId['max'])) {
				$this->addUsingAlias(FlightPeer::TARGET_LOCATION_ID, $targetLocationId['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FlightPeer::TARGET_LOCATION_ID, $targetLocationId, $comparison);
	}

	/**
	 * Filter the query on the flight_type column
	 * 
	 * @param     string $flightType The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function filterByFlightType($flightType = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($flightType)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $flightType)) {
				$flightType = str_replace('*', '%', $flightType);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(FlightPeer::FLIGHT_TYPE, $flightType, $comparison);
	}

	/**
	 * Filter the query on the flight_start column
	 * 
	 * @param     string|array $flightStart The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function filterByFlightStart($flightStart = null, $comparison = null)
	{
		if (is_array($flightStart)) {
			$useMinMax = false;
			if (isset($flightStart['min'])) {
				$this->addUsingAlias(FlightPeer::FLIGHT_START, $flightStart['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($flightStart['max'])) {
				$this->addUsingAlias(FlightPeer::FLIGHT_START, $flightStart['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FlightPeer::FLIGHT_START, $flightStart, $comparison);
	}

	/**
	 * Filter the query on the flight_end column
	 * 
	 * @param     string|array $flightEnd The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function filterByFlightEnd($flightEnd = null, $comparison = null)
	{
		if (is_array($flightEnd)) {
			$useMinMax = false;
			if (isset($flightEnd['min'])) {
				$this->addUsingAlias(FlightPeer::FLIGHT_END, $flightEnd['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($flightEnd['max'])) {
				$this->addUsingAlias(FlightPeer::FLIGHT_END, $flightEnd['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FlightPeer::FLIGHT_END, $flightEnd, $comparison);
	}

	/**
	 * Filter the query on the flight_duration column
	 * 
	 * @param     int|array $flightDuration The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function filterByFlightDuration($flightDuration = null, $comparison = null)
	{
		if (is_array($flightDuration)) {
			$useMinMax = false;
			if (isset($flightDuration['min'])) {
				$this->addUsingAlias(FlightPeer::FLIGHT_DURATION, $flightDuration['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($flightDuration['max'])) {
				$this->addUsingAlias(FlightPeer::FLIGHT_DURATION, $flightDuration['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FlightPeer::FLIGHT_DURATION, $flightDuration, $comparison);
	}

	/**
	 * Filter the query on the flight_accepted column
	 * 
	 * @param     string $flightAccepted The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function filterByFlightAccepted($flightAccepted = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($flightAccepted)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $flightAccepted)) {
				$flightAccepted = str_replace('*', '%', $flightAccepted);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(FlightPeer::FLIGHT_ACCEPTED, $flightAccepted, $comparison);
	}

	/**
	 * Filter the query on the landing_notification column
	 * 
	 * @param     boolean|string $landingNotification The value to use as filter.
	 *            Accepts strings ('false', 'off', '-', 'no', 'n', and '0' are false, the rest is true)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function filterByLandingNotification($landingNotification = null, $comparison = null)
	{
		if (is_string($landingNotification)) {
			$landing_notification = in_array(strtolower($landingNotification), array('false', 'off', '-', 'no', 'n', '0')) ? false : true;
		}
		return $this->addUsingAlias(FlightPeer::LANDING_NOTIFICATION, $landingNotification, $comparison);
	}

	/**
	 * Filter the query by a related User object
	 *
	 * @param     User $user  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function filterByUser($user, $comparison = null)
	{
		return $this
			->addUsingAlias(FlightPeer::USER_ID, $user->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the User relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function joinUser($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('User');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'User');
		}
		
		return $this;
	}

	/**
	 * Use the User relation User object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    UserQuery A secondary query class using the current class as primary query
	 */
	public function useUserQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinUser($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'User', 'UserQuery');
	}

	/**
	 * Filter the query by a related Friend object
	 *
	 * @param     Friend $friend  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function filterByFriend($friend, $comparison = null)
	{
		return $this
			->addUsingAlias(FlightPeer::FRIEND_ID, $friend->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Friend relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function joinFriend($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Friend');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Friend');
		}
		
		return $this;
	}

	/**
	 * Use the Friend relation Friend object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FriendQuery A secondary query class using the current class as primary query
	 */
	public function useFriendQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinFriend($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Friend', 'FriendQuery');
	}

	/**
	 * Filter the query by a related Location object
	 *
	 * @param     Location $location  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function filterByLocationRelatedByStartLocationId($location, $comparison = null)
	{
		return $this
			->addUsingAlias(FlightPeer::START_LOCATION_ID, $location->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the LocationRelatedByStartLocationId relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function joinLocationRelatedByStartLocationId($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('LocationRelatedByStartLocationId');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'LocationRelatedByStartLocationId');
		}
		
		return $this;
	}

	/**
	 * Use the LocationRelatedByStartLocationId relation Location object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    LocationQuery A secondary query class using the current class as primary query
	 */
	public function useLocationRelatedByStartLocationIdQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinLocationRelatedByStartLocationId($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'LocationRelatedByStartLocationId', 'LocationQuery');
	}

	/**
	 * Filter the query by a related Location object
	 *
	 * @param     Location $location  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function filterByLocationRelatedByTargetLocationId($location, $comparison = null)
	{
		return $this
			->addUsingAlias(FlightPeer::TARGET_LOCATION_ID, $location->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the LocationRelatedByTargetLocationId relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function joinLocationRelatedByTargetLocationId($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('LocationRelatedByTargetLocationId');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'LocationRelatedByTargetLocationId');
		}
		
		return $this;
	}

	/**
	 * Use the LocationRelatedByTargetLocationId relation Location object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    LocationQuery A secondary query class using the current class as primary query
	 */
	public function useLocationRelatedByTargetLocationIdQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinLocationRelatedByTargetLocationId($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'LocationRelatedByTargetLocationId', 'LocationQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Flight $flight Object to remove from the list of results
	 *
	 * @return    FlightQuery The current query, for fluid interface
	 */
	public function prune($flight = null)
	{
		if ($flight) {
			$this->addUsingAlias(FlightPeer::ID, $flight->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BaseFlightQuery
