<?php


/**
 * Base class that represents a row from the 'Playerstatus' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.3 on:
 *
 * Tue May 24 10:36:30 2011
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BasePlayerstatus extends BaseObject  implements Persistent
{

	/**
	 * Peer class name
	 */
  const PEER = 'PlayerstatusPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        PlayerstatusPeer
	 */
	protected static $peer;

	/**
	 * The value for the user_id field.
	 * @var        int
	 */
	protected $user_id;

	/**
	 * The value for the on_flight field.
	 * @var        boolean
	 */
	protected $on_flight;

	/**
	 * The value for the points field.
	 * @var        string
	 */
	protected $points;

	/**
	 * The value for the bonus field.
	 * @var        int
	 */
	protected $bonus;

	/**
	 * The value for the flight_points field.
	 * @var        int
	 */
	protected $flight_points;

	/**
	 * The value for the available_miles field.
	 * @var        int
	 */
	protected $available_miles;

	/**
	 * The value for the flightmiles_total field.
	 * @var        int
	 */
	protected $flightmiles_total;

	/**
	 * The value for the flightmiles_week field.
	 * @var        int
	 */
	protected $flightmiles_week;

	/**
	 * The value for the flight_count field.
	 * @var        int
	 */
	protected $flight_count;

	/**
	 * The value for the homebase_flight field.
	 * @var        int
	 */
	protected $homebase_flight;

	/**
	 * The value for the player_rank field.
	 * @var        string
	 */
	protected $player_rank;

	/**
	 * The value for the week1 field.
	 * @var        int
	 */
	protected $week1;

	/**
	 * The value for the week2 field.
	 * @var        int
	 */
	protected $week2;

	/**
	 * The value for the week3 field.
	 * @var        int
	 */
	protected $week3;

	/**
	 * The value for the week4 field.
	 * @var        int
	 */
	protected $week4;

	/**
	 * The value for the week5 field.
	 * @var        int
	 */
	protected $week5;

	/**
	 * The value for the week6 field.
	 * @var        int
	 */
	protected $week6;

	/**
	 * The value for the week7 field.
	 * @var        int
	 */
	protected $week7;

	/**
	 * The value for the week8 field.
	 * @var        int
	 */
	protected $week8;

	/**
	 * @var        User
	 */
	protected $aUser;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Get the [user_id] column value.
	 * 
	 * @return     int
	 */
	public function getUserId()
	{
		return $this->user_id;
	}

	/**
	 * Get the [on_flight] column value.
	 * 
	 * @return     boolean
	 */
	public function getOnFlight()
	{
		return $this->on_flight;
	}

	/**
	 * Get the [points] column value.
	 * 
	 * @return     string
	 */
	public function getPoints()
	{
		return $this->points;
	}

	/**
	 * Get the [bonus] column value.
	 * 
	 * @return     int
	 */
	public function getBonus()
	{
		return $this->bonus;
	}

	/**
	 * Get the [flight_points] column value.
	 * 
	 * @return     int
	 */
	public function getFlightPoints()
	{
		return $this->flight_points;
	}

	/**
	 * Get the [available_miles] column value.
	 * verf端gbare Meilen
	 * @return     int
	 */
	public function getAvailableMiles()
	{
		return $this->available_miles;
	}

	/**
	 * Get the [flightmiles_total] column value.
	 * Flugmeilen
	 * @return     int
	 */
	public function getFlightmilesTotal()
	{
		return $this->flightmiles_total;
	}

	/**
	 * Get the [flightmiles_week] column value.
	 * Flugmeilen
	 * @return     int
	 */
	public function getFlightmilesWeek()
	{
		return $this->flightmiles_week;
	}

	/**
	 * Get the [flight_count] column value.
	 * Anzahl der Fl端ge
	 * @return     int
	 */
	public function getFlightCount()
	{
		return $this->flight_count;
	}

	/**
	 * Get the [homebase_flight] column value.
	 * 
	 * @return     int
	 */
	public function getHomebaseFlight()
	{
		return $this->homebase_flight;
	}

	/**
	 * Get the [player_rank] column value.
	 * Rangname
	 * @return     string
	 */
	public function getPlayerRank()
	{
		return $this->player_rank;
	}

	/**
	 * Get the [week1] column value.
	 * 
	 * @return     int
	 */
	public function getWeek1()
	{
		return $this->week1;
	}

	/**
	 * Get the [week2] column value.
	 * 
	 * @return     int
	 */
	public function getWeek2()
	{
		return $this->week2;
	}

	/**
	 * Get the [week3] column value.
	 * 
	 * @return     int
	 */
	public function getWeek3()
	{
		return $this->week3;
	}

	/**
	 * Get the [week4] column value.
	 * 
	 * @return     int
	 */
	public function getWeek4()
	{
		return $this->week4;
	}

	/**
	 * Get the [week5] column value.
	 * 
	 * @return     int
	 */
	public function getWeek5()
	{
		return $this->week5;
	}

	/**
	 * Get the [week6] column value.
	 * 
	 * @return     int
	 */
	public function getWeek6()
	{
		return $this->week6;
	}

	/**
	 * Get the [week7] column value.
	 * 
	 * @return     int
	 */
	public function getWeek7()
	{
		return $this->week7;
	}

	/**
	 * Get the [week8] column value.
	 * 
	 * @return     int
	 */
	public function getWeek8()
	{
		return $this->week8;
	}

	/**
	 * Set the value of [user_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Playerstatus The current object (for fluent API support)
	 */
	public function setUserId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->user_id !== $v) {
			$this->user_id = $v;
			$this->modifiedColumns[] = PlayerstatusPeer::USER_ID;
		}

		if ($this->aUser !== null && $this->aUser->getId() !== $v) {
			$this->aUser = null;
		}

		return $this;
	} // setUserId()

	/**
	 * Set the value of [on_flight] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Playerstatus The current object (for fluent API support)
	 */
	public function setOnFlight($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->on_flight !== $v) {
			$this->on_flight = $v;
			$this->modifiedColumns[] = PlayerstatusPeer::ON_FLIGHT;
		}

		return $this;
	} // setOnFlight()

	/**
	 * Set the value of [points] column.
	 * 
	 * @param      string $v new value
	 * @return     Playerstatus The current object (for fluent API support)
	 */
	public function setPoints($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->points !== $v) {
			$this->points = $v;
			$this->modifiedColumns[] = PlayerstatusPeer::POINTS;
		}

		return $this;
	} // setPoints()

	/**
	 * Set the value of [bonus] column.
	 * 
	 * @param      int $v new value
	 * @return     Playerstatus The current object (for fluent API support)
	 */
	public function setBonus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->bonus !== $v) {
			$this->bonus = $v;
			$this->modifiedColumns[] = PlayerstatusPeer::BONUS;
		}

		return $this;
	} // setBonus()

	/**
	 * Set the value of [flight_points] column.
	 * 
	 * @param      int $v new value
	 * @return     Playerstatus The current object (for fluent API support)
	 */
	public function setFlightPoints($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->flight_points !== $v) {
			$this->flight_points = $v;
			$this->modifiedColumns[] = PlayerstatusPeer::FLIGHT_POINTS;
		}

		return $this;
	} // setFlightPoints()

	/**
	 * Set the value of [available_miles] column.
	 * verf端gbare Meilen
	 * @param      int $v new value
	 * @return     Playerstatus The current object (for fluent API support)
	 */
	public function setAvailableMiles($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->available_miles !== $v) {
			$this->available_miles = $v;
			$this->modifiedColumns[] = PlayerstatusPeer::AVAILABLE_MILES;
		}

		return $this;
	} // setAvailableMiles()

	/**
	 * Set the value of [flightmiles_total] column.
	 * Flugmeilen
	 * @param      int $v new value
	 * @return     Playerstatus The current object (for fluent API support)
	 */
	public function setFlightmilesTotal($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->flightmiles_total !== $v) {
			$this->flightmiles_total = $v;
			$this->modifiedColumns[] = PlayerstatusPeer::FLIGHTMILES_TOTAL;
		}

		return $this;
	} // setFlightmilesTotal()

	/**
	 * Set the value of [flightmiles_week] column.
	 * Flugmeilen
	 * @param      int $v new value
	 * @return     Playerstatus The current object (for fluent API support)
	 */
	public function setFlightmilesWeek($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->flightmiles_week !== $v) {
			$this->flightmiles_week = $v;
			$this->modifiedColumns[] = PlayerstatusPeer::FLIGHTMILES_WEEK;
		}

		return $this;
	} // setFlightmilesWeek()

	/**
	 * Set the value of [flight_count] column.
	 * Anzahl der Fl端ge
	 * @param      int $v new value
	 * @return     Playerstatus The current object (for fluent API support)
	 */
	public function setFlightCount($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->flight_count !== $v) {
			$this->flight_count = $v;
			$this->modifiedColumns[] = PlayerstatusPeer::FLIGHT_COUNT;
		}

		return $this;
	} // setFlightCount()

	/**
	 * Set the value of [homebase_flight] column.
	 * 
	 * @param      int $v new value
	 * @return     Playerstatus The current object (for fluent API support)
	 */
	public function setHomebaseFlight($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->homebase_flight !== $v) {
			$this->homebase_flight = $v;
			$this->modifiedColumns[] = PlayerstatusPeer::HOMEBASE_FLIGHT;
		}

		return $this;
	} // setHomebaseFlight()

	/**
	 * Set the value of [player_rank] column.
	 * Rangname
	 * @param      string $v new value
	 * @return     Playerstatus The current object (for fluent API support)
	 */
	public function setPlayerRank($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->player_rank !== $v) {
			$this->player_rank = $v;
			$this->modifiedColumns[] = PlayerstatusPeer::PLAYER_RANK;
		}

		return $this;
	} // setPlayerRank()

	/**
	 * Set the value of [week1] column.
	 * 
	 * @param      int $v new value
	 * @return     Playerstatus The current object (for fluent API support)
	 */
	public function setWeek1($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->week1 !== $v) {
			$this->week1 = $v;
			$this->modifiedColumns[] = PlayerstatusPeer::WEEK1;
		}

		return $this;
	} // setWeek1()

	/**
	 * Set the value of [week2] column.
	 * 
	 * @param      int $v new value
	 * @return     Playerstatus The current object (for fluent API support)
	 */
	public function setWeek2($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->week2 !== $v) {
			$this->week2 = $v;
			$this->modifiedColumns[] = PlayerstatusPeer::WEEK2;
		}

		return $this;
	} // setWeek2()

	/**
	 * Set the value of [week3] column.
	 * 
	 * @param      int $v new value
	 * @return     Playerstatus The current object (for fluent API support)
	 */
	public function setWeek3($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->week3 !== $v) {
			$this->week3 = $v;
			$this->modifiedColumns[] = PlayerstatusPeer::WEEK3;
		}

		return $this;
	} // setWeek3()

	/**
	 * Set the value of [week4] column.
	 * 
	 * @param      int $v new value
	 * @return     Playerstatus The current object (for fluent API support)
	 */
	public function setWeek4($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->week4 !== $v) {
			$this->week4 = $v;
			$this->modifiedColumns[] = PlayerstatusPeer::WEEK4;
		}

		return $this;
	} // setWeek4()

	/**
	 * Set the value of [week5] column.
	 * 
	 * @param      int $v new value
	 * @return     Playerstatus The current object (for fluent API support)
	 */
	public function setWeek5($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->week5 !== $v) {
			$this->week5 = $v;
			$this->modifiedColumns[] = PlayerstatusPeer::WEEK5;
		}

		return $this;
	} // setWeek5()

	/**
	 * Set the value of [week6] column.
	 * 
	 * @param      int $v new value
	 * @return     Playerstatus The current object (for fluent API support)
	 */
	public function setWeek6($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->week6 !== $v) {
			$this->week6 = $v;
			$this->modifiedColumns[] = PlayerstatusPeer::WEEK6;
		}

		return $this;
	} // setWeek6()

	/**
	 * Set the value of [week7] column.
	 * 
	 * @param      int $v new value
	 * @return     Playerstatus The current object (for fluent API support)
	 */
	public function setWeek7($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->week7 !== $v) {
			$this->week7 = $v;
			$this->modifiedColumns[] = PlayerstatusPeer::WEEK7;
		}

		return $this;
	} // setWeek7()

	/**
	 * Set the value of [week8] column.
	 * 
	 * @param      int $v new value
	 * @return     Playerstatus The current object (for fluent API support)
	 */
	public function setWeek8($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->week8 !== $v) {
			$this->week8 = $v;
			$this->modifiedColumns[] = PlayerstatusPeer::WEEK8;
		}

		return $this;
	} // setWeek8()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->user_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->on_flight = ($row[$startcol + 1] !== null) ? (boolean) $row[$startcol + 1] : null;
			$this->points = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->bonus = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->flight_points = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->available_miles = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->flightmiles_total = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->flightmiles_week = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->flight_count = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->homebase_flight = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->player_rank = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->week1 = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->week2 = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->week3 = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->week4 = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->week5 = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->week6 = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->week7 = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->week8 = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			return $startcol + 19; // 19 = PlayerstatusPeer::NUM_COLUMNS - PlayerstatusPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Playerstatus object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aUser !== null && $this->user_id !== $this->aUser->getId()) {
			$this->aUser = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PlayerstatusPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = PlayerstatusPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aUser = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PlayerstatusPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePlayerstatus:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			    return;
			  }
			}
			
			if ($ret) {
				PlayerstatusQuery::create()
					->filterByPrimaryKey($this->getPrimaryKey())
					->delete($con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePlayerstatus:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}
				
				$con->commit();
				$this->setDeleted(true);
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PlayerstatusPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePlayerstatus:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			  	$con->commit();
			    return $affectedRows;
			  }
			}
			
			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePlayerstatus:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}
				
				PlayerstatusPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aUser !== null) {
				if ($this->aUser->isModified() || $this->aUser->isNew()) {
					$affectedRows += $this->aUser->save($con);
				}
				$this->setUser($this->aUser);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$criteria = $this->buildCriteria();
					$pk = BasePeer::doInsert($criteria, $con);
					$affectedRows += 1;
					$this->setNew(false);
				} else {
					$affectedRows += PlayerstatusPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aUser !== null) {
				if (!$this->aUser->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUser->getValidationFailures());
				}
			}


			if (($retval = PlayerstatusPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PlayerstatusPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getUserId();
				break;
			case 1:
				return $this->getOnFlight();
				break;
			case 2:
				return $this->getPoints();
				break;
			case 3:
				return $this->getBonus();
				break;
			case 4:
				return $this->getFlightPoints();
				break;
			case 5:
				return $this->getAvailableMiles();
				break;
			case 6:
				return $this->getFlightmilesTotal();
				break;
			case 7:
				return $this->getFlightmilesWeek();
				break;
			case 8:
				return $this->getFlightCount();
				break;
			case 9:
				return $this->getHomebaseFlight();
				break;
			case 10:
				return $this->getPlayerRank();
				break;
			case 11:
				return $this->getWeek1();
				break;
			case 12:
				return $this->getWeek2();
				break;
			case 13:
				return $this->getWeek3();
				break;
			case 14:
				return $this->getWeek4();
				break;
			case 15:
				return $this->getWeek5();
				break;
			case 16:
				return $this->getWeek6();
				break;
			case 17:
				return $this->getWeek7();
				break;
			case 18:
				return $this->getWeek8();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. 
	 *                    Defaults to BasePeer::TYPE_PHPNAME.
	 * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to TRUE.
	 * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
	 *
	 * @return    array an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $includeForeignObjects = false)
	{
		$keys = PlayerstatusPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getUserId(),
			$keys[1] => $this->getOnFlight(),
			$keys[2] => $this->getPoints(),
			$keys[3] => $this->getBonus(),
			$keys[4] => $this->getFlightPoints(),
			$keys[5] => $this->getAvailableMiles(),
			$keys[6] => $this->getFlightmilesTotal(),
			$keys[7] => $this->getFlightmilesWeek(),
			$keys[8] => $this->getFlightCount(),
			$keys[9] => $this->getHomebaseFlight(),
			$keys[10] => $this->getPlayerRank(),
			$keys[11] => $this->getWeek1(),
			$keys[12] => $this->getWeek2(),
			$keys[13] => $this->getWeek3(),
			$keys[14] => $this->getWeek4(),
			$keys[15] => $this->getWeek5(),
			$keys[16] => $this->getWeek6(),
			$keys[17] => $this->getWeek7(),
			$keys[18] => $this->getWeek8(),
		);
		if ($includeForeignObjects) {
			if (null !== $this->aUser) {
				$result['User'] = $this->aUser->toArray($keyType, $includeLazyLoadColumns, true);
			}
		}
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PlayerstatusPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setUserId($value);
				break;
			case 1:
				$this->setOnFlight($value);
				break;
			case 2:
				$this->setPoints($value);
				break;
			case 3:
				$this->setBonus($value);
				break;
			case 4:
				$this->setFlightPoints($value);
				break;
			case 5:
				$this->setAvailableMiles($value);
				break;
			case 6:
				$this->setFlightmilesTotal($value);
				break;
			case 7:
				$this->setFlightmilesWeek($value);
				break;
			case 8:
				$this->setFlightCount($value);
				break;
			case 9:
				$this->setHomebaseFlight($value);
				break;
			case 10:
				$this->setPlayerRank($value);
				break;
			case 11:
				$this->setWeek1($value);
				break;
			case 12:
				$this->setWeek2($value);
				break;
			case 13:
				$this->setWeek3($value);
				break;
			case 14:
				$this->setWeek4($value);
				break;
			case 15:
				$this->setWeek5($value);
				break;
			case 16:
				$this->setWeek6($value);
				break;
			case 17:
				$this->setWeek7($value);
				break;
			case 18:
				$this->setWeek8($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PlayerstatusPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setUserId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setOnFlight($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setPoints($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setBonus($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setFlightPoints($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setAvailableMiles($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setFlightmilesTotal($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setFlightmilesWeek($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setFlightCount($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setHomebaseFlight($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setPlayerRank($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setWeek1($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setWeek2($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setWeek3($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setWeek4($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setWeek5($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setWeek6($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setWeek7($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setWeek8($arr[$keys[18]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(PlayerstatusPeer::DATABASE_NAME);

		if ($this->isColumnModified(PlayerstatusPeer::USER_ID)) $criteria->add(PlayerstatusPeer::USER_ID, $this->user_id);
		if ($this->isColumnModified(PlayerstatusPeer::ON_FLIGHT)) $criteria->add(PlayerstatusPeer::ON_FLIGHT, $this->on_flight);
		if ($this->isColumnModified(PlayerstatusPeer::POINTS)) $criteria->add(PlayerstatusPeer::POINTS, $this->points);
		if ($this->isColumnModified(PlayerstatusPeer::BONUS)) $criteria->add(PlayerstatusPeer::BONUS, $this->bonus);
		if ($this->isColumnModified(PlayerstatusPeer::FLIGHT_POINTS)) $criteria->add(PlayerstatusPeer::FLIGHT_POINTS, $this->flight_points);
		if ($this->isColumnModified(PlayerstatusPeer::AVAILABLE_MILES)) $criteria->add(PlayerstatusPeer::AVAILABLE_MILES, $this->available_miles);
		if ($this->isColumnModified(PlayerstatusPeer::FLIGHTMILES_TOTAL)) $criteria->add(PlayerstatusPeer::FLIGHTMILES_TOTAL, $this->flightmiles_total);
		if ($this->isColumnModified(PlayerstatusPeer::FLIGHTMILES_WEEK)) $criteria->add(PlayerstatusPeer::FLIGHTMILES_WEEK, $this->flightmiles_week);
		if ($this->isColumnModified(PlayerstatusPeer::FLIGHT_COUNT)) $criteria->add(PlayerstatusPeer::FLIGHT_COUNT, $this->flight_count);
		if ($this->isColumnModified(PlayerstatusPeer::HOMEBASE_FLIGHT)) $criteria->add(PlayerstatusPeer::HOMEBASE_FLIGHT, $this->homebase_flight);
		if ($this->isColumnModified(PlayerstatusPeer::PLAYER_RANK)) $criteria->add(PlayerstatusPeer::PLAYER_RANK, $this->player_rank);
		if ($this->isColumnModified(PlayerstatusPeer::WEEK1)) $criteria->add(PlayerstatusPeer::WEEK1, $this->week1);
		if ($this->isColumnModified(PlayerstatusPeer::WEEK2)) $criteria->add(PlayerstatusPeer::WEEK2, $this->week2);
		if ($this->isColumnModified(PlayerstatusPeer::WEEK3)) $criteria->add(PlayerstatusPeer::WEEK3, $this->week3);
		if ($this->isColumnModified(PlayerstatusPeer::WEEK4)) $criteria->add(PlayerstatusPeer::WEEK4, $this->week4);
		if ($this->isColumnModified(PlayerstatusPeer::WEEK5)) $criteria->add(PlayerstatusPeer::WEEK5, $this->week5);
		if ($this->isColumnModified(PlayerstatusPeer::WEEK6)) $criteria->add(PlayerstatusPeer::WEEK6, $this->week6);
		if ($this->isColumnModified(PlayerstatusPeer::WEEK7)) $criteria->add(PlayerstatusPeer::WEEK7, $this->week7);
		if ($this->isColumnModified(PlayerstatusPeer::WEEK8)) $criteria->add(PlayerstatusPeer::WEEK8, $this->week8);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PlayerstatusPeer::DATABASE_NAME);
		$criteria->add(PlayerstatusPeer::USER_ID, $this->user_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getUserId();
	}

	/**
	 * Generic method to set the primary key (user_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setUserId($key);
	}

	/**
	 * Returns true if the primary key for this object is null.
	 * @return     boolean
	 */
	public function isPrimaryKeyNull()
	{
		return null === $this->getUserId();
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Playerstatus (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{
		$copyObj->setUserId($this->user_id);
		$copyObj->setOnFlight($this->on_flight);
		$copyObj->setPoints($this->points);
		$copyObj->setBonus($this->bonus);
		$copyObj->setFlightPoints($this->flight_points);
		$copyObj->setAvailableMiles($this->available_miles);
		$copyObj->setFlightmilesTotal($this->flightmiles_total);
		$copyObj->setFlightmilesWeek($this->flightmiles_week);
		$copyObj->setFlightCount($this->flight_count);
		$copyObj->setHomebaseFlight($this->homebase_flight);
		$copyObj->setPlayerRank($this->player_rank);
		$copyObj->setWeek1($this->week1);
		$copyObj->setWeek2($this->week2);
		$copyObj->setWeek3($this->week3);
		$copyObj->setWeek4($this->week4);
		$copyObj->setWeek5($this->week5);
		$copyObj->setWeek6($this->week6);
		$copyObj->setWeek7($this->week7);
		$copyObj->setWeek8($this->week8);

		$copyObj->setNew(true);
	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Playerstatus Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     PlayerstatusPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PlayerstatusPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a User object.
	 *
	 * @param      User $v
	 * @return     Playerstatus The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUser(User $v = null)
	{
		if ($v === null) {
			$this->setUserId(NULL);
		} else {
			$this->setUserId($v->getId());
		}

		$this->aUser = $v;

		// Add binding for other direction of this 1:1 relationship.
		if ($v !== null) {
			$v->setPlayerstatus($this);
		}

		return $this;
	}


	/**
	 * Get the associated User object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     User The associated User object.
	 * @throws     PropelException
	 */
	public function getUser(PropelPDO $con = null)
	{
		if ($this->aUser === null && ($this->user_id !== null)) {
			$this->aUser = UserQuery::create()->findPk($this->user_id, $con);
			// Because this foreign key represents a one-to-one relationship, we will create a bi-directional association.
			$this->aUser->setPlayerstatus($this);
		}
		return $this->aUser;
	}

	/**
	 * Clears the current object and sets all attributes to their default values
	 */
	public function clear()
	{
		$this->user_id = null;
		$this->on_flight = null;
		$this->points = null;
		$this->bonus = null;
		$this->flight_points = null;
		$this->available_miles = null;
		$this->flightmiles_total = null;
		$this->flightmiles_week = null;
		$this->flight_count = null;
		$this->homebase_flight = null;
		$this->player_rank = null;
		$this->week1 = null;
		$this->week2 = null;
		$this->week3 = null;
		$this->week4 = null;
		$this->week5 = null;
		$this->week6 = null;
		$this->week7 = null;
		$this->week8 = null;
		$this->alreadyInSave = false;
		$this->alreadyInValidation = false;
		$this->clearAllReferences();
		$this->resetModified();
		$this->setNew(true);
		$this->setDeleted(false);
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

		$this->aUser = null;
	}

	/**
	 * Catches calls to virtual methods
	 */
	public function __call($name, $params)
	{
		// symfony_behaviors behavior
		if ($callable = sfMixer::getCallable('BasePlayerstatus:' . $name))
		{
		  array_unshift($params, $this);
		  return call_user_func_array($callable, $params);
		}
		
		if (preg_match('/get(\w+)/', $name, $matches)) {
			$virtualColumn = $matches[1];
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
			// no lcfirst in php<5.3...
			$virtualColumn[0] = strtolower($virtualColumn[0]);
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
		}
		return parent::__call($name, $params);
	}

} // BasePlayerstatus
