<?php


/**
 * Base class that represents a query for the 'Friend' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.3 on:
 *
 * Tue May 24 10:36:29 2011
 *
 * @method     FriendQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     FriendQuery orderByFbId($order = Criteria::ASC) Order by the fb_id column
 * @method     FriendQuery orderByName($order = Criteria::ASC) Order by the name column
 * @method     FriendQuery orderByIsInvited($order = Criteria::ASC) Order by the is_invited column
 * @method     FriendQuery orderByLocationId($order = Criteria::ASC) Order by the Location_id column
 *
 * @method     FriendQuery groupById() Group by the id column
 * @method     FriendQuery groupByFbId() Group by the fb_id column
 * @method     FriendQuery groupByName() Group by the name column
 * @method     FriendQuery groupByIsInvited() Group by the is_invited column
 * @method     FriendQuery groupByLocationId() Group by the Location_id column
 *
 * @method     FriendQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     FriendQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     FriendQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     FriendQuery leftJoinLocation($relationAlias = null) Adds a LEFT JOIN clause to the query using the Location relation
 * @method     FriendQuery rightJoinLocation($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Location relation
 * @method     FriendQuery innerJoinLocation($relationAlias = null) Adds a INNER JOIN clause to the query using the Location relation
 *
 * @method     FriendQuery leftJoinFlight($relationAlias = null) Adds a LEFT JOIN clause to the query using the Flight relation
 * @method     FriendQuery rightJoinFlight($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Flight relation
 * @method     FriendQuery innerJoinFlight($relationAlias = null) Adds a INNER JOIN clause to the query using the Flight relation
 *
 * @method     FriendQuery leftJoinFriendrelation($relationAlias = null) Adds a LEFT JOIN clause to the query using the Friendrelation relation
 * @method     FriendQuery rightJoinFriendrelation($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Friendrelation relation
 * @method     FriendQuery innerJoinFriendrelation($relationAlias = null) Adds a INNER JOIN clause to the query using the Friendrelation relation
 *
 * @method     Friend findOne(PropelPDO $con = null) Return the first Friend matching the query
 * @method     Friend findOneOrCreate(PropelPDO $con = null) Return the first Friend matching the query, or a new Friend object populated from the query conditions when no match is found
 *
 * @method     Friend findOneById(int $id) Return the first Friend filtered by the id column
 * @method     Friend findOneByFbId(string $fb_id) Return the first Friend filtered by the fb_id column
 * @method     Friend findOneByName(string $name) Return the first Friend filtered by the name column
 * @method     Friend findOneByIsInvited(boolean $is_invited) Return the first Friend filtered by the is_invited column
 * @method     Friend findOneByLocationId(int $Location_id) Return the first Friend filtered by the Location_id column
 *
 * @method     array findById(int $id) Return Friend objects filtered by the id column
 * @method     array findByFbId(string $fb_id) Return Friend objects filtered by the fb_id column
 * @method     array findByName(string $name) Return Friend objects filtered by the name column
 * @method     array findByIsInvited(boolean $is_invited) Return Friend objects filtered by the is_invited column
 * @method     array findByLocationId(int $Location_id) Return Friend objects filtered by the Location_id column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseFriendQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseFriendQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Friend', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new FriendQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    FriendQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof FriendQuery) {
			return $criteria;
		}
		$query = new FriendQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    Friend|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = FriendPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{	
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    FriendQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(FriendPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    FriendQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(FriendPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     int|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FriendQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(FriendPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the fb_id column
	 * 
	 * @param     string $fbId The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FriendQuery The current query, for fluid interface
	 */
	public function filterByFbId($fbId = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($fbId)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $fbId)) {
				$fbId = str_replace('*', '%', $fbId);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(FriendPeer::FB_ID, $fbId, $comparison);
	}

	/**
	 * Filter the query on the name column
	 * 
	 * @param     string $name The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FriendQuery The current query, for fluid interface
	 */
	public function filterByName($name = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($name)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $name)) {
				$name = str_replace('*', '%', $name);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(FriendPeer::NAME, $name, $comparison);
	}

	/**
	 * Filter the query on the is_invited column
	 * 
	 * @param     boolean|string $isInvited The value to use as filter.
	 *            Accepts strings ('false', 'off', '-', 'no', 'n', and '0' are false, the rest is true)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FriendQuery The current query, for fluid interface
	 */
	public function filterByIsInvited($isInvited = null, $comparison = null)
	{
		if (is_string($isInvited)) {
			$is_invited = in_array(strtolower($isInvited), array('false', 'off', '-', 'no', 'n', '0')) ? false : true;
		}
		return $this->addUsingAlias(FriendPeer::IS_INVITED, $isInvited, $comparison);
	}

	/**
	 * Filter the query on the Location_id column
	 * 
	 * @param     int|array $locationId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FriendQuery The current query, for fluid interface
	 */
	public function filterByLocationId($locationId = null, $comparison = null)
	{
		if (is_array($locationId)) {
			$useMinMax = false;
			if (isset($locationId['min'])) {
				$this->addUsingAlias(FriendPeer::LOCATION_ID, $locationId['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($locationId['max'])) {
				$this->addUsingAlias(FriendPeer::LOCATION_ID, $locationId['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FriendPeer::LOCATION_ID, $locationId, $comparison);
	}

	/**
	 * Filter the query by a related Location object
	 *
	 * @param     Location $location  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FriendQuery The current query, for fluid interface
	 */
	public function filterByLocation($location, $comparison = null)
	{
		return $this
			->addUsingAlias(FriendPeer::LOCATION_ID, $location->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Location relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FriendQuery The current query, for fluid interface
	 */
	public function joinLocation($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Location');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Location');
		}
		
		return $this;
	}

	/**
	 * Use the Location relation Location object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    LocationQuery A secondary query class using the current class as primary query
	 */
	public function useLocationQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinLocation($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Location', 'LocationQuery');
	}

	/**
	 * Filter the query by a related Flight object
	 *
	 * @param     Flight $flight  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FriendQuery The current query, for fluid interface
	 */
	public function filterByFlight($flight, $comparison = null)
	{
		return $this
			->addUsingAlias(FriendPeer::ID, $flight->getFriendId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Flight relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FriendQuery The current query, for fluid interface
	 */
	public function joinFlight($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Flight');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Flight');
		}
		
		return $this;
	}

	/**
	 * Use the Flight relation Flight object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FlightQuery A secondary query class using the current class as primary query
	 */
	public function useFlightQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinFlight($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Flight', 'FlightQuery');
	}

	/**
	 * Filter the query by a related Friendrelation object
	 *
	 * @param     Friendrelation $friendrelation  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FriendQuery The current query, for fluid interface
	 */
	public function filterByFriendrelation($friendrelation, $comparison = null)
	{
		return $this
			->addUsingAlias(FriendPeer::ID, $friendrelation->getFriendId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Friendrelation relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FriendQuery The current query, for fluid interface
	 */
	public function joinFriendrelation($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Friendrelation');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Friendrelation');
		}
		
		return $this;
	}

	/**
	 * Use the Friendrelation relation Friendrelation object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FriendrelationQuery A secondary query class using the current class as primary query
	 */
	public function useFriendrelationQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinFriendrelation($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Friendrelation', 'FriendrelationQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Friend $friend Object to remove from the list of results
	 *
	 * @return    FriendQuery The current query, for fluid interface
	 */
	public function prune($friend = null)
	{
		if ($friend) {
			$this->addUsingAlias(FriendPeer::ID, $friend->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BaseFriendQuery
